{"version":3,"sources":["dynamic-images.js"],"names":["instance","DynamicImages","options","defaults","init","canvas","document","createElement","ctx","getContext","images","querySelectorAll","i","length","draw","img","width","parseInt","dataset","height","background","fillStyle","fillRect","font","textAlign","strokeText","getText","src","toDataURL","reset","clearRect","message","console","log"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Instance reference for singleton. \r\n * Manage only one instance of the class DynamicImages.\r\n *\r\n * @public\r\n * @type {DynamicImages}\r\n * @default null\r\n */\r\nlet instance = null;\r\n\r\n/**\r\n * Create dynamic <img> source.\r\n *\r\n * @class\r\n * @classdesc Create dynamic images based on the given configuration. See documentation for more information.\r\n */\r\nclass DynamicImages {\r\n\r\n\t/**\r\n\t * Constructor method. \r\n\t * \r\n\t * @see https://stackoverflow.com/a/171256/3441223\r\n\t */\r\n\tconstructor(options) {\r\n\t\tif(!instance) {\r\n\t\t\tinstance = this;\r\n\t\t\t\r\n\t\t\tthis.options = {...DynamicImages.defaults, ...options};\r\n\t\t\tthis.init();\r\n\t\t}\r\n\r\n\t\treturn instance;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepare the canvas for drawing, and the set the drawing context,\r\n\t * in this case 2 Dimensional drawings. Query <img> tags where [data-dynamic] is present.\r\n\t *\r\n\t * @public\r\n\t */\r\n\tinit() {\r\n\t\tthis.canvas = document.createElement('canvas');\r\n\t\tthis.ctx = this.canvas.getContext('2d');\r\n\t\tthis.images = document.querySelectorAll('img[data-dynamic]');\r\n\r\n\t\t// Loop through the images\r\n\t\tfor(let i = 0; i < this.images.length; i++) {\r\n\t\t\tthis.draw(this.images[i]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draw the image from the canvas and assign the BLOB to the current image.\r\n\t *\r\n\t * @public\r\n\t * @param {object} img The <img> element.\r\n\t */\r\n\tdraw(img) {\r\n\t\t// Retreive custom data attributes \r\n\t\tlet width = parseInt(img.dataset.width); // data-width\r\n\t\tlet height = parseInt(img.dataset.height); // data-height\r\n\t\tlet background = img.dataset.background; // data-background\r\n\r\n\t\t// Check for valid custom data attributes, if doesn't exist\r\n\t\t// fallback to defaults options.\r\n\t\tif(!width || (typeof width != 'number'))\r\n\t\t\twidth = this.options.width;\r\n\r\n\t\tif(!height || (typeof height != 'number')) \r\n\t\t\theight = this.options.height;\r\n\r\n\t\tif(!background)\r\n\t\t\tbackground = this.options.background;\r\n\r\n\t\t// Set canvas width and height\r\n\t\tthis.canvas.width = width;\r\n\t\tthis.canvas.height = height;\r\n\r\n\t\t// Set the background color.\r\n\t\tthis.ctx.fillStyle = background;\r\n\t\t// Draw the shape.\r\n\t\tthis.ctx.fillRect(0, 0, width, height);\r\n\r\n\t\t// Draw text\r\n\t\tthis.ctx.font = '40px Monospace';\r\n\t\tthis.ctx.textAlign = 'center';\r\n\t\tthis.ctx.strokeText(this.getText(width, height), width / 2, height / 2);\r\n\r\n\t\t// Assign BLOB to the <img> src\r\n\t\timg.src = this.canvas.toDataURL();\r\n\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraw images.\r\n\t *\r\n\t * @public\r\n\t */\r\n\tredraw() {\r\n\t\tthis.init();\r\n\t}\r\n\r\n\t/**\r\n\t * Reset canvas for redrawing.\r\n\t * \r\n\t * @see https://stackoverflow.com/a/2142549/3441223\r\n\t */\r\n\treset() {\r\n\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate width x height text.\r\n\t *\r\n\t * @public\r\n\t * @param {number} width\r\n\t * @param {number} height\r\n\t */\r\n\tgetText(width, height) {\r\n\t\treturn `${width}x${height}`;\r\n\t}\r\n\r\n\t/**\r\n\t * Shorthand for console.log\r\n\t *\r\n\t * @public\r\n\t * @static\r\n\t * @function\r\n\t * @param {string | object} message The message to log.\r\n\t */\r\n\tstatic log(message) {\r\n\t\tconsole.log(message);\r\n\t}\r\n}\r\n\r\n/**\r\n * Set default properties.\r\n */\r\nDynamicImages.defaults = {\r\n\t/**\r\n\t * Default image width.\r\n\t * \r\n\t * @type {number}\r\n\t * @default 150\r\n\t */\r\n\twidth: 150,\r\n\t/**\r\n\t * Default image height.\r\n\t *\r\n\t * @type {number}\r\n\t * @default 150\r\n\t */\r\n\theight: 150,\r\n\t/**\r\n\t * Default background color for the image.\r\n\t *\r\n\t * @type {string}\r\n\t * @default #ccc\r\n\t */\r\n\tbackground: '#ccc'\r\n};\r\n"],"file":"dynamic-images.js"}